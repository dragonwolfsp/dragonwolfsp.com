<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>the dragonwolf&#x27;s den - Tales from the Shadow Pride</title>
      <link>https://dragonwolfsp.com/blog/</link>
      <description></description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://dragonwolfsp.com/blog/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Mon, 03 Mar 2025 00:00:00 +0000</lastBuildDate>
      <item>
          <title>The wolf and the moon by karliene, a song of moonlight and pachion.</title>
          <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
          <author>Ethan Jones</author>
          <link>https://dragonwolfsp.com/blog/karliene-the-wolf-and-the-moon/</link>
          <guid>https://dragonwolfsp.com/blog/karliene-the-wolf-and-the-moon/</guid>
          <description xml:base="https://dragonwolfsp.com/blog/karliene-the-wolf-and-the-moon/">&lt;p&gt;The Wolf and The Moon is a folk song released in 2016 by Scottish artist Karliene. It tells the story of a wounded wolf, alone in the winter snow. A fight with a bear had left the wolf injured, exposed, and dying. As he lay there, he looked up at the moon, and she smiled upon him. At this moment, the moon becomes a comforting presence to the wolf, as the song describes:&lt;br &#x2F;&gt;
&quot;She wrapped him up tight&lt;br &#x2F;&gt;
In a blanket of stars&lt;br &#x2F;&gt;
In a kiss in her red gold light.&quot;&lt;br &#x2F;&gt;
The wolf sings songs of &quot;passion and love&quot; to the moon, pouring out his soul. When he wakes the next day, he is surprised to find his wounds healed. Looking to the sky, he presumably realizes that it was the moon who saved him. This song is a symphony of love, passion, and hope. It carries a message not just of resilience, but of releasing the emotions within. The wolf&#x27;s howling songs symbolize this release, while the moon and its healing light represent hope itself. Karliene&#x27;s music is heavily inspired by various fantasy series, such as Game of Thrones, The Lord of the Rings, and The Hunger Games. Her beautiful musical style is also deeply influenced by her Celtic roots, featuring rich and full arrangements centered around strings, simple drums, and vocals. This particular song consists of guitar, voice, cellos, and tin whistles (or flutes), creating a haunting yet ethereal atmosphere. It doesn&#x27;t seem heavily influenced by any specific time period, though 2016 was a strong year for fantasy books with releases such as The Bands of Mourning (Mistborn #6) by Brandon Sanderson, A Court of Mist and Fury (A Court of Thorns and Roses #2) by Sarah J. Maas, Fire Touched (Mercy Thompson #9) by Patricia Briggs, and Magic Binds (Kate Daniels #9) by Ilona Andrews. Each of these books  are from incredibly popular fantasy series. Additionally, Kate Daniels and Mercy Thompson both feature shapeshifting werewolves, which this song may be alluding to. This song, and Karliene&#x27;s music in general are  a breathtaking and powerful symphony of fantasy and emotion.&lt;&#x2F;p&gt;
&lt;p&gt;The first time I heard this song, it felt like the emotional equivalent of a slap upside the head. I was coding my game engine, Electrode, at the time, listening to Karliene&#x27;s music in the background. My friend Deann had just told me about her music, so I figured I&#x27;d give it a listen. I was in the middle of trying to solve a particular problem with the game engine when The Wolf and The Moon came on. It had a very different mood compared to the previous song, so it immediately grabbed my attention. By the time the song ended, my brain was pretty much in a non-functioning state. I can&#x27;t fully describe how I felt, but let&#x27;s just say I didn’t get any more coding done that day. The story in this song pulls you in, and the raw emotion in Karliene&#x27;s voice is nothing short of staggering. Wolves have always been one of my favorite animals—and one of my top four favorite fantasy tropes. I’m not sure why, but I&#x27;ve always felt a strong connection to them. This song tugs on that emotional thread in a way that’s hard to put into words, and it will always be one of my favorites.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;references&quot;&gt;References&lt;&#x2F;h1&gt;
&lt;p&gt;Balestri, A. (2016, May 11). A cat of a different coat: Spirituality, storytelling, and the music of karliene. Geeks Under Grace.&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.geeksundergrace.com&#x2F;music&#x2F;a-cat-of-a-different-coat-spirituality-storytellilng-and-the-music-of-karliene&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.geeksundergrace.com&#x2F;music&#x2F;a-cat-of-a-different-coat-spirituality-storytellilng-and-the-music-of-karliene&#x2F;&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
Goodreads. (2016). Best fantasy of 2016 (33 books). Goodreads.&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;list&#x2F;show&#x2F;114992.Best_Fantasy_of_2016&quot;&gt;https:&#x2F;&#x2F;www.goodreads.com&#x2F;list&#x2F;show&#x2F;114992.Best_Fantasy_of_2016&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
Lester, L. (n.d.). The meaning behind the song: The Wolf and the Moon by karliene. Musician Wages.&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.musicianwages.com&#x2F;w2&#x2F;the-meaning-behind-the-song-the-wolf-and-the-moon-by-karliene&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.musicianwages.com&#x2F;w2&#x2F;the-meaning-behind-the-song-the-wolf-and-the-moon-by-karliene&#x2F;&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
The supernatural, soulful, haunting, melancholic music of Karliene. Supernatural Hippie. (2019, October 21).&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;supernaturalhippie.com&#x2F;2019&#x2F;10&#x2F;21&#x2F;the-supernatural-soulful-haunting-melancholic-music-of-karliene&#x2F;&quot;&gt;https:&#x2F;&#x2F;supernaturalhippie.com&#x2F;2019&#x2F;10&#x2F;21&#x2F;the-supernatural-soulful-haunting-melancholic-music-of-karliene&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>My perspective on art and art clasification</title>
          <pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate>
          <author>Ethan Jones</author>
          <link>https://dragonwolfsp.com/blog/my-perspective-on-art/</link>
          <guid>https://dragonwolfsp.com/blog/my-perspective-on-art/</guid>
          <description xml:base="https://dragonwolfsp.com/blog/my-perspective-on-art/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h1&gt;
&lt;p&gt;Art is a significant piece of our world, but what exactly is it? Art is purely subjective, mentally involved, and effort-requiring work that holds meaning for an individual or a group. It is a creation of the mind, and without thinking beings, a concept based in thought cannot exist. Art is, quite literally, thought incarnate.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;purely-subjective&quot;&gt;Purely Subjective&lt;&#x2F;h1&gt;
&lt;p&gt;Art is purely subjective. Essentially, something becomes art when it is perceived as such by the beholder. For example, if I look at a hammer and say, “This hammer is a work of art,” then to me, a work of art it is. However, if my brother looks at the same hammer and says, “This hammer is a tool; I will use it to pound nails,” then to him, the hammer is not art at all. This accentuates that art is whatever you perceive it to be. In essence, art is defined by the significance and value the mind deems it to contain.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;mentally-involved&quot;&gt;Mentally Involved&lt;&#x2F;h1&gt;
&lt;p&gt;Art is mentally involved, meaning that thought and-or skill must go into its creation. Let’s use AI-generated art as an example. If I prompt a machine learning model such as &lt;a href=&quot;https:&#x2F;&#x2F;suno.com&#x2F;home&quot;&gt;Suno AI&lt;&#x2F;a&gt; to “make a song about the stars,” I have contributed no real part of myself to the piece. However, if I prompt it with something more personal, such as, “Make a symphonic metal song about a hero named Davos Dawn Erso, who travels the stars protecting those he loves. He is the leader of the Iron Power, an organization dedicated to defending those who cannot protect themselves. He is also a Chaos wielder and uses his control of Chaos magic to safeguard the galaxy,” then the piece contains a part of me. This prompt is based on a role-playing character I created, making it an artistic expression. The more personal involvement and intent behind an artistic work, The stronger its claim to being a true work of art.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;effort-requiring&quot;&gt;Effort Requiring&lt;&#x2F;h1&gt;
&lt;p&gt;Art requires effort, therefore some level of exertion must be involved before something can be classified as art. Let’s return to the hammer. Someone had to forge the head, craft and attach the handle, and wrap it to ensure it wouldn’t harm the wielder’s hands. This process required effort. Now, consider AI-generated art again. In my first example, I put in no effort. However, in the second, things become more complicated. Did I put in effort? Some may argue no because the AI still created the music, but in reality, the answer is yes. I put effort into developing the character of Davos Dawn Erso. Even though I didn’t directly compose the song, the character himself is the art piece. Essentially, while the final creation may not always require direct effort, the underlying artistic vision and input are still needed.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;meaning-expressing&quot;&gt;Meaning Expressing&lt;&#x2F;h1&gt;
&lt;p&gt;Art holds meaning. For something to be classified as art, it must carry meaning for the artist or the observer. This meaning doesn’t have to be complex, but it must exist. Suppose someone paints a skyline and says, “This is a skyline.” To them, it is not art because it lacks deeper significance. However, an observer might see the skyline as a representation of modern life or the passage of time. This subjectivity transforms a simple painting into art. Additionally, meaning can be far more straightforward. If an artist paints a forest and says, “This is the forest outside my home,” then the piece holds personal significance. In essence, art must contain meaning, but that meaning does not have to be profound or philosophical.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;At its core, art is a concept of the mind, an effortful process, and a subjectively meaningful creation. It exists because the mind perceives it, and it reflects the thoughts of its creator or observer. Art is a mentally involved, effort-requiring, and purely subjective incarnation of thought.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Syncing Secrets: How I Manage Config Files Across All Devices!</title>
          <pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate>
          <author>Ethan Jones</author>
          <link>https://dragonwolfsp.com/blog/syncing-secrets-how-i-manage-config-files-across-all-devices/</link>
          <guid>https://dragonwolfsp.com/blog/syncing-secrets-how-i-manage-config-files-across-all-devices/</guid>
          <description xml:base="https://dragonwolfsp.com/blog/syncing-secrets-how-i-manage-config-files-across-all-devices/">&lt;h1 id=&quot;introduction&quot;&gt;introduction.&lt;&#x2F;h1&gt;
&lt;p&gt;Syncing configuration files across multiple devices poses a grate challenge. Tools like Syncthing or Resilio Sync can help, but what happens when a device goes offline? Massive sync conflicts arise, necessitating a manual hunt for the root cause and deletion of conflicting files. Sometimes, these conflicts spread throughout your sync network, causing persistent issues. Cloud services like Dropbox, OneDrive, Google Drive, or iCloud Drive are alternatives, but trusting a company with your data may be a concern. What you  need is a solution that handles versioning, conflict resolution, and is easy to manage. Enter Git – the go-to tool for software developers, even used by major companies like Uber. In this article, I&#x27;ll walk you through how I use Git to effortlessly sync my configuration files across all devices. Let&#x27;s dive into the details and get you started on simplifying your configuration file management.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-you-ll-need&quot;&gt;What you&#x27;ll need.&lt;&#x2F;h2&gt;
&lt;p&gt;Before diving in, ensure you have a couple of essential prerequisites in place. Firstly, you&#x27;ll need a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&quot;&gt;GitHub&lt;&#x2F;a&gt; account, and secondly, make sure &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&quot;&gt;Git&lt;&#x2F;a&gt; is installed on your computer. Once you&#x27;ve taken care of these two steps, you&#x27;ll be all set for the next stage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-your-configuration-repository&quot;&gt;Setting up your configuration repository.&lt;&#x2F;h2&gt;
&lt;p&gt;Now, to create your configuration repository, I&#x27;ll demonstrate using&lt;a href=&quot;https:&#x2F;&#x2F;cli.github.com&quot;&gt;gh-cli&lt;&#x2F;a&gt;but you can also achieve this on the&lt;a href=&quot;https:&#x2F;&#x2F;github.com&quot;&gt;github&lt;&#x2F;a&gt;website. With&lt;a href=&quot;https:&#x2F;&#x2F;cli.github.com&quot;&gt;gh-cli&lt;&#x2F;a&gt;open a PowerShell window on Windows or Bash&#x2F;Zsh on Linux, then run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;gh repo create
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Answer the prompted questions with your preferred settings. If you opted not to clone the repository locally, use one of the following commands:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If not using SSH.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;yourUserName&#x2F;yourRepositoryName.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;If using SSH without &lt;a href=&quot;https:&#x2F;&#x2F;cli.github.com&quot;&gt;gh-cli&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;git clone git@github.com:yourUsername&#x2F;yourRepositoryName
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;If using &lt;a href=&quot;https:&#x2F;&#x2F;cli.github.com&quot;&gt;gh-cli&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;gh repo clone yourUsername&#x2F;yourRepositoryName
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, let&#x27;s move on to the next stage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-your-configs-in-the-right-place&quot;&gt;Getting your configs in the right place.&lt;&#x2F;h2&gt;
&lt;p&gt;To start, you&#x27;ll need to copy all of the configuration files that you want to store in git in to the directory in which your repository is located. Now, we need to create some links so that hour programs will still think that hour configuration files are in the right place. I like to set up a script to do this(links.bat on Windows, links.sh on Linux and MacOs)
here is an example for Linux and MacOs showing how I simlinked my &lt;a href=&quot;https:&#x2F;&#x2F;starship.rs&quot;&gt;starship&lt;&#x2F;a&gt; config:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ln -s ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;configs&#x2F;.config&#x2F;starship.toml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.config&#x2F;starship.toml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can also be done with a directory. It is a bit more complicated to do this on windows, if your going to link a file you need to make a hardlink using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ps&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ps &quot;&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;&lt;span&gt;mklink &#x2F;H &#x2F;path&#x2F;to&#x2F;destination&#x2F;file &#x2F;path&#x2F;to&#x2F;source&#x2F;file
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you want to link an entire folder, you&#x27;ll need a junction link using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ps&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ps &quot;&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;&lt;span&gt;mklink &#x2F;J &#x2F;path&#x2F;to&#x2F;destination&#x2F;directory &#x2F;path&#x2F;to&#x2F;source&#x2F;directory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is my links.bat as an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;batch&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-batch &quot;&gt;&lt;code class=&quot;language-batch&quot; data-lang=&quot;batch&quot;&gt;&lt;span&gt;mklink &#x2F;J %appdata%\foobar2000-v2 foobar2000-v2 
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;J %appdata%\ExplorerPatcher ExplorerPatcher
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;J %appdata%\Rizonesoft Rizonesoft 
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;J %userprofile%\Documents\WindowsPowerShell ps5
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;J %userprofile%\Documents\PowerShell ps7
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;J %localappdata%\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState terminal
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;J %userprofile%\portable\KeyOp\data keyop
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;J %appdata%\nvda nvda
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;J %userprofile%\.config\scoop scoop
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;H %appdata%\Notepad2.ini unsorted\Notepad2.ini 
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;H %userprofile%\komorebi.json komorebi\komorebi.json
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;H %userprofile%\applications.yaml komorebi\applications.yaml
&lt;&#x2F;span&gt;&lt;span&gt;mklink &#x2F;H %userprofile%\.config\whkdrc unsorted\whkdrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we&#x27;ve got that out of the way, lets move on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-your-first-commit-and-push&quot;&gt;Making your first commit and push.&lt;&#x2F;h2&gt;
&lt;p&gt;In order to push hour files to github, we need to commit the changes we just made to the repository. To do this run the following while in the repositories directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;git add .
&lt;&#x2F;span&gt;&lt;span&gt;git commit -m &amp;quot;Initial configuration upload.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Than to push hour changes to the github remote:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;git push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;your-all-done-but-heres-some-tips&quot;&gt;Your all done, but heres some tips.&lt;&#x2F;h2&gt;
&lt;p&gt;Now all you have to do is clone the repo on to another computer and run your links script. Boom! you have your configs. If you ever want to update them from your main machine or a nother computer, all you have to do is commit and push your changes. Heres some tips to improove your experience.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Handling multiple operating systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To do this I Have created a git branch for each operating system. If you also want to do this, run the following on the repository (I&#x27;ll use Windows as an example):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ps&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ps &quot;&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;&lt;span&gt;git branch win
&lt;&#x2F;span&gt;&lt;span&gt;git checkout win
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add your files and links script. than run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ps&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ps &quot;&gt;&lt;code class=&quot;language-ps&quot; data-lang=&quot;ps&quot;&gt;&lt;span&gt;git add .
&lt;&#x2F;span&gt;&lt;span&gt;git commit -m &amp;quot;Initial upload of windows files.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;git push -u origin win
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows git to seporate and keep a completely different version history than the Mac, Linux, or main branch. I tipicly just use main for configs that are universal accross all   operating systems.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Clean and clear commit messages.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You may have been wondering what the -m flag was for in the git commit command. The m stands for message, this allows you to attach a message to your commit. It is very useful wen looking thrue your git history, but not if you have unclear messages. I have a specific method I follow wen writing commit messages for my config repo. It goes as follows.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;git commit -m &amp;quot;config I updated: Changes I made.&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example: lets say I added Kubernetes to my starship config. I would write something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;git commit -m &amp;quot;starship: Adds Kubernetes module, sets an accessible symbol for it.&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way I keep my git commit history readable and organized.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;With this approach, you can effortlessly synchronize your configuration files across all your devices, ensuring a conflict-free environment that won&#x27;t disrupt your workflow. Thanks for reading—I trust this simplifies the syncing process for you.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;watch-the-video&quot;&gt;Watch the video&lt;&#x2F;h3&gt;
&lt;div &gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;AT6kPGx9cLU&quot;
        allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
      <item>
          <title>My Daily Grind: Unveiling the Programs I Swear By!</title>
          <pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate>
          <author>Ethan Jones</author>
          <link>https://dragonwolfsp.com/blog/my-daily-grind-unveiling-the-programs-i-swear-by/</link>
          <guid>https://dragonwolfsp.com/blog/my-daily-grind-unveiling-the-programs-i-swear-by/</guid>
          <description xml:base="https://dragonwolfsp.com/blog/my-daily-grind-unveiling-the-programs-i-swear-by/">&lt;h1 id=&quot;welcome&quot;&gt;welcome&lt;&#x2F;h1&gt;
&lt;p&gt;Welcome to my workflow, today I will be telling you about the programs I use every day. I can&#x27;t do without these programs, they make it so I can do what I do every day and not get so mad that I throw a computer at a wall. Heres a quick overview of the programs we will be discussing.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;KeyOp: to map all my keyboard shortcuts.&lt;&#x2F;li&gt;
&lt;li&gt;NUtils: to keep me from  going insane from all my Windows.&lt;&#x2F;li&gt;
&lt;li&gt;NVDA: to make it possible for me to use a computer.&lt;&#x2F;li&gt;
&lt;li&gt;Windows Terminal: To manage all those shells.&lt;&#x2F;li&gt;
&lt;li&gt;starship: To bling up my terminal.&lt;&#x2F;li&gt;
&lt;li&gt;xplorer2: For efficient and accessible file browsing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;keyop&quot;&gt;KeyOp&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;garwood.day&#x2F;utils&#x2F;KeyOp.zip&quot;&gt;KeyOp&lt;&#x2F;a&gt; is truly one of the best programs I&#x27;ve ever found; it allows you to set keyboard shortcuts for literally anything. It works by allowing you to create categories which can be triggered by keyboard shortcuts. Those categories than contain single letter shortcuts for you to run any command you want. Where it gets really powerful is when you start defining sub categories. You could have a category for apps, than communication, and than press z for zoom, t for teams, d for discord, etc. With in apps yu could also have a category for browsers, and than be able to press b for Brave, t for Thorium, f for Firefox, l for LibreWolf, etc. I Think you can see why &lt;a href=&quot;https:&#x2F;&#x2F;garwood.day&#x2F;utils&#x2F;KeyOp.zip&quot;&gt;KeyOp&lt;&#x2F;a&gt; is one of my favorite programs. Thank you to Damion Garwood for this excellent program.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nutils&quot;&gt;NUtils&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0ot&#x2F;nutils&quot;&gt;NUtils&lt;&#x2F;a&gt; is my favorite program for managing windows. It allows you to sort your windows into stacks and hide them there until you need them. It achieves this functionality through keyboard shortcuts. These shortcuts are configurable in its configuration file, but essentially, you have four shortcuts for managing windows: one to hide and unhide a window from a specific slot in a stack, one to move to the next stack, one to move to the previous stack, and one to show all hidden windows in a tree view. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n0ot&#x2F;nutils&quot;&gt;NUtils&lt;&#x2F;a&gt; also enables you to easily terminate a frozen program with a shortcut (Windows+F4 by default). Additionally, it allows screen reader users to make a window transparent to protect from unknown people looking over their shoulder. You can also change the title of a window, making sorting through windows with the same name much easier. This program is how I can keep my desktop organized without going crazy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;non-visual-desktop-access-nvda&quot;&gt;Non Visual Desktop Access(NVDA)&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nvaccess.org&quot;&gt;Nvda&lt;&#x2F;a&gt; is the reason I can use my Windows Machine at all; it is a screen reader for the blind and visually impaired. It is highly extendable, with support for addons and custom dictionaries. &lt;a href=&quot;https:&#x2F;&#x2F;nvaccess.org&quot;&gt;Nvda&lt;&#x2F;a&gt;  is the highly flexible screen reader that makes my work possible.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;windows-terminal&quot;&gt;Windows Terminal.&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;terminal&#x2F;releases&quot;&gt;Windows Terminal&lt;&#x2F;a&gt; is my terminal emulator of choice for Windows; it has many features, such as multiple tabs, profiles for different shells, and many keyboard shortcuts, which is always a blessing for us screen reader users. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;terminal&#x2F;releases&quot;&gt;Windows Terminal&lt;&#x2F;a&gt;  makes my command line work a lot more pleasant.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;starship&quot;&gt;Starship.&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;starship.rs&quot;&gt;Starship&lt;&#x2F;a&gt; is my shell prompt, for all my shells! It has so many features it would be impossible to cover them all here, but the ones I love the most are the git status, Python and Poetry status, and &lt;a href=&quot;https:&#x2F;&#x2F;starship.rs&quot;&gt;Starship&#x27;s&lt;&#x2F;a&gt;  general ability to customize how my prompt looks, or in my case sounds. &lt;a href=&quot;https:&#x2F;&#x2F;starship.rs&quot;&gt;Starship&lt;&#x2F;a&gt;  gives me the information I need when working with the command line.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xplorer2&quot;&gt;xplorer2:&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zabkat.com&quot;&gt;Xplorer2&lt;&#x2F;a&gt; is my file manager of choice; it is so much faster than the Windows built-in file explorer, it&#x27;s mind-boggling. Not only that, it also has a lot more features, such as dual-pane, flat browsing, and, as always, more keyboard shortcuts! It has so much more than that, but it would take days to go through everything it can do. &lt;a href=&quot;https:&#x2F;&#x2F;www.zabkat.com&quot;&gt;Xplorer2&lt;&#x2F;a&gt;  may be the only paid program on this list, but it definitely deserves its spot for its outstanding feature set.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;watch-the-video&quot;&gt;watch the video&lt;&#x2F;h3&gt;
&lt;div &gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;o_iryQVL1aY&quot;
        allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</description>
      </item>
    </channel>
</rss>
